#!/usr/bin/env python
#-*- mode: python -*-
#-*- coding: utf-8 -*-

"""
usage: garainstall [OPTIONS] root-path
Options:
 --yes|-y (without invokating yes or no questions)
 --developer|-d (clone the repository as a developer. proper ssh
                 key is required)
 --without-install-packages (does not install any packages with apt or port)
 --without-clone-git (does not clone any git repository of garaemon)
 --github-yaml=YAML_FILE (specify yaml file written the repositories to
                          be cloned from github.com. in default,
                          github.yaml is used)
 --without-sbcl (does not compile sbcl)
 --package-yaml=YAML_FILE (specify yaml file written the packages to be
                           installed. in default, packages.yaml is used.)
 
"""
from optparse import OptionParser, OptionValueError
import os
import sys
import shutil
import codecs
import subprocess
import yaml                     # installed by garabootstrap

sys.stdout = codecs.getwriter('utf_8')(sys.stdout)
sys.stdin = codecs.getreader('utf_8')(sys.stdin)
pwd = os.path.dirname(os.path.abspath(__file__))

def detect_os():
    """
    only supports darwin and ubuntu.
    returns a string stands for architecture.
    If you use not supported OS, it raise an exception.
    """
    if os.path.exists("/usr/bin/sw_vers"):
        return "darwin"
    elif os.path.exists("/usr/bin/lsb_release"):
        return "Ubuntu"
    else:
        raise

def usage():
    """
    print usage
    """
    print __doc__ % vars()

def setup_parser(parser):
    """
    setup parse option, these add_options must be according to documentation of
    this script.
    """
    parser.add_option("-y", "--yes", dest = "without_query_yes_no",
                      default = False,
                      help = "without query yes or no in aptitude (and port)",
                      action = "store_true")
    parser.add_option("-d", "--developer", dest = "clone_as_developer",
                      default = False,
                      help = "clone garaemon-install repository as committer",
                      action = "store_true")
    parser.add_option("--without-install-packages",
                      dest = "without_install_packages",
                      default = False,
                      help = "does not install any packages with apt or port",
                      action = "store_true")
    parser.add_option("--without-sbcl",
                      dest = "without_sbcl",
                      default = False,
                      help = "does not compile sbcl",
                      action = "store_true")
    parser.add_option("--without-clone-git",
                      dest = "without_clone_git",
                      default = False,
                      help = "does not clone github repository of garaemon",
                      action = "store_true")
    parser.add_option("--package-yaml",
                      dest = "package_yaml",
                      default = "packages.yaml",
                      help = """specify yaml file the package to be installed
                      is written""",
                      action = "store")
    parser.add_option("--github-yaml",
                      dest = "github_yaml",
                      default = "github.yaml",
                      help = """specify yaml file the package to be cloned
                      is written""",
                      action = "store")
    return parser


def extract_packages(yaml_file, arch):
    """
    returns the packages according to arch from yaml_file.
    """
    packages = yaml.load(open(yaml_file).read())
    arch_packages = map(lambda p: p[p.keys()[0]][arch], packages)
    
    print ">> installing %s" % arch_packages
    return arch_packages

def install_packages(without_query_yes_no, packages):
    arch = detect_os()
    if arch == "Ubuntu":
        apt_command = "aptitude"
    elif arch == "darwin":
        apt_command = "port"
    commands = ["sudo", apt_command, "install"]
    if without_query_yes_no:
        commands.append("-y")
    commands.extend(packages)
    subprocess.check_call(commands)
    
def install_packages_from_yaml(without_query_yes_no, package_yaml):
    """
    install some packages specified by package_yaml.
    if without_query_yes_no is True, run the install command with -y option.
    """
    arch = detect_os()
    install_packages(without_query_yes_no, extract_packages(package_yaml, arch))
    
def clone_github_repos(root_path, yaml_file, clone_as_developer_p):
    repos = yaml.load(open(yaml_file).read())
    print ">> cloning %s" % [r['repository']['name'] for r in repos]
    for repo in repos:
        name = repo['repository']['name']
        location = repo['repository']['location']
        if clone_as_developer_p:
            uri = 'git@github.com:' + location
        else:
            uri = 'git://github.com/' + location
        repo_path = os.path.join(root_path, name)
        if os.path.exists(repo_path):
            prev_cd = os.getcwd()
            os.chdir(repo_path)
            git_command = ['git', 'pull']
            subprocess.check_call(git_command)
            os.chdir(prev_cd)
        else:
            git_command = ['git', 'clone', uri, repo_path]
            subprocess.check_call(git_command)

def compile_and_install_sbcl(root_path):
    print ">> installing sbcl"
    sbcl_path = os.path.join(root_path, "sbcl")
    # first of all, install binary sbcl
    try:
        check_sbcl = ['sbcl', '--version']
        subprocess.check_call(check_sbcl)
    except:
        # install sbcl
        install_packages(True, ["sbcl"])
    # checking out
    sbcl_url = "-d:pserver:anonymous@sbcl.cvs.sourceforge.net:/cvsroot/sbcl"
    if not os.path.exists(sbcl_path):
        cvs_login_command = ["cvs", sbcl_url, "login"]
        cvs_co_command = ["cvs", "-z3", sbcl_url, "co", "-P", sbcl_path]
        subprocess.check_call(cvs_login_command)
        subprocess.check_call(cvs_co_command)
    else:
        os.chdir(sbcl_path)
        cvs_update_command = ["cvs", "up"]
        subprocess.check_call(cvs_update_command)
    # copy extention files...
    sbcl_customize_feature = "customize-target-features.lisp"
    if not os.path.exists(os.path.join(sbcl_path, sbcl_customize_feature)):
        # copy
        from_path = os.path.abspath(os.path.join(pwd,
                                                 sbcl_customize_feature))
        shutil.copyfile(from_path,
                        os.path.join(sbcl_path, sbcl_customize_feature))
    sbcl_compr = "sbclcompr"
    if not os.path.exists(os.path.join(sbcl_path, sbcl_compr)):
        # copy
        from_path = os.path.abspath(os.path.join(pwd,
                                                 sbcl_compr))
        shutil.copyfile(from_path, os.path.join(sbcl_path, sbcl_compr))
        shutil.copymode(from_path, os.path.join(sbcl_path, sbcl_compr))
    # build
    os.chdir(sbcl_path)
    subprocess.check_call(["sh", "./make.sh"])
    # install
    subprocess.check_call(["sudo", "sh", "./install.sh"])
    # remove sbcl if sbcl is installed by the package system

def main(argv):
    """
    main function.
    """
    if len(argv) < 2:
        usage()
        exit(1)                         # return false
    # argv[0] = garainstall
    args = argv[1:]
    # parse setup
    parser = OptionParser()
    setup_parser(parser)
    (options, args) = parser.parse_args(args)
    root_path = os.path.abspath(args[0])
    if not options.without_install_packages:
        install_packages_from_yaml(options.without_query_yes_no,
                                   options.package_yaml)
    if not options.without_clone_git:
        clone_github_repos(root_path, options.github_yaml,
                           options.clone_as_developer)
    if not options.without_sbcl:
        compile_and_install_sbcl(root_path)

main(sys.argv)

