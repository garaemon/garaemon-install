#!/usr/bin/env python
#-*- mode: python -*-
#-*- coding: utf-8 -*-

"""
usage: garainstall [OPTIONS] root-path
Options:
 --yes|-y (without invokating yes or no questions)
 --developer|-d (clone the repository as a developer. proper ssh
                 key is required)
 --all|-a (alias option, equals --install-packages, --clone-git,
           --sbcl, --emacs-settings)
 --install-packages (install the packages by the package system os privodes)
 --package-yaml=YAML_FILE (specify yaml file written the packages to be
                           installed. in default, packages.yaml is used.)
 --clone-git (clone any git repositories)
 --github-yaml=YAML_FILE (specify yaml file written the repositories to
                          be cloned from github.com. in default,
                          github.yaml is used)
 --sbcl (update and compile sbcl)
 --emacs-settings (run emacs-settings, you need to install emacs-settings
                   before)
 --nerdtool (download nerdtool and copy to /Application directory)
 --conky (copy conkyrc to $HOME/.conkyrc)
 --ffmpeg (download and build ffmpeg)
"""

from optparse import OptionParser, OptionValueError
import os
import sys
import shutil
import codecs
import subprocess
import yaml                     # installed by garabootstrap

sys.stdout = codecs.getwriter('utf_8')(sys.stdout)
sys.stdin = codecs.getreader('utf_8')(sys.stdin)
pwd = os.path.dirname(os.path.abspath(__file__))

def detect_os():
    """
    only supports darwin and ubuntu.
    returns a string stands for architecture.
    If you use not supported OS, it raise an exception.
    """
    if os.path.exists("/usr/bin/sw_vers"):
        return "darwin"
    elif os.path.exists("/usr/bin/lsb_release"):
        return "Ubuntu"
    else:
        raise

def usage():
    """
    print usage
    """
    print __doc__ % vars()

def setup_parser(parser):
    """
    setup parse option, these add_options must be according to documentation of
    this script.
    """
    parser.add_option("-y", "--yes", dest = "without_query_yes_no",
                      default = False,
                      help = "without query yes or no in aptitude (and port)",
                      action = "store_true")
    parser.add_option("-d", "--developer", dest = "clone_as_developer",
                      default = False,
                      help = "clone garaemon-install repository as committer",
                      action = "store_true")
    parser.add_option("--install-packages",
                      dest = "install_packages",
                      default = False,
                      help = "install some packages with apt or port",
                      action = "store_true")
    parser.add_option("--sbcl",
                      dest = "sbcl",
                      default = False,
                      help = "update and compile sbcl",
                      action = "store_true")
    parser.add_option("--clone-git",
                      dest = "clone_git",
                      default = False,
                      help = """clone github repositories specified by
                       --github-yaml""",
                      action = "store_true")
    parser.add_option("--emacs-settings",
                      dest = "emacs_settings",
                      default = False,
                      help = "run emacs-settings",
                      action = "store_true")
    parser.add_option("--package-yaml",
                      dest = "package_yaml",
                      default = "packages.yaml",
                      help = """specify yaml file the package to be installed
                      is written""",
                      action = "store")
    parser.add_option("--github-yaml",
                      dest = "github_yaml",
                      default = "github.yaml",
                      help = """specify yaml file the package to be cloned
                      is written""",
                      action = "store")
    parser.add_option("--all", "-a", dest = "all",
                      default = False,
                      help = """equals --install-packages, --clone-git,
                      --sbcl, --emacs-settings""",
                      action = "store_true")
    parser.add_option("--nerdtool", dest = "nerdtool",
                      default = False,
                      help = """download nerdtool and copy it to /Application""",
                      action = "store_true")
    parser.add_option("--conky", dest = "conky",
                      default = False,
                      help = """conpy conkyrc to ~/.conkyrc""",
                      action = "store_true")
    parser.add_option("--ffmpeg", dest = "ffmpeg",
                      default = False,
                      help = """ download the source code of ffmpeg and
                      build it.""",
                      action = "store_true")
    return parser


def extract_packages(yaml_file, arch):
    """
    returns the packages according to arch from yaml_file.
    """
    packages = yaml.load(open(yaml_file).read())
    arch_packages = [p[p.keys()[0]][arch] for p in packages
                     if p[p.keys()[0]].has_key(arch)]
    print ">> installing %s" % arch_packages
    return arch_packages

def install_packages(without_query_yes_no, packages):
    arch = detect_os()
    if arch == "Ubuntu":
        apt_command = "aptitude"
    elif arch == "darwin":
        apt_command = "port"
    commands = ["sudo", apt_command, "install"]
    if without_query_yes_no:
        commands.append("-y")
    commands.extend(packages)
    subprocess.check_call(commands)
    
def install_packages_from_yaml(without_query_yes_no, package_yaml):
    """
    install some packages specified by package_yaml.
    if without_query_yes_no is True, run the install command with -y option.
    """
    arch = detect_os()
    install_packages(without_query_yes_no, extract_packages(package_yaml, arch))
    
def install_nerdtool(root_path):
    download_path = os.path.join("/tmp")
    url = "http://cloud.github.com/downloads/balthamos/geektool-3/NerdTool_0.8.zip"
    fname = os.path.basename(url)
    directory_name = os.path.splitext(fname)[0]
    if detect_os() == "darwin":
        print ">> installing NerdTool"
        os.chdir(download_path)
        subprocess.check_call(["wget", "-N", url])
        subprocess.check_call(["unzip", fname])
        subprocess.check_call(["cp", "-r",
                               os.path.join(directory_name, "NerdTool.app"),
                               "/Applications"])
    else:
        raise Exception, "only darwin is supported"
def setup_conky(root):
    if detect_os() == "Ubuntu":
        print ">> installing conky"
        shutil.copyfile(os.path.join(root, "garaemon-install", "conkyrc"),
                        os.path.expanduser("~/.conkyrc"))
        

def clone_github_repos(root_path, yaml_file, clone_as_developer_p):
    repos = yaml.load(open(yaml_file).read())
    print ">> cloning %s" % [r['repository']['name'] for r in repos]
    for repo in repos:
        name = repo['repository']['name']
        location = repo['repository']['location']
        if clone_as_developer_p:
            uri = 'git@github.com:' + location
        else:
            uri = 'git://github.com/' + location
        repo_path = os.path.join(root_path, name)
        if os.path.exists(repo_path):
            prev_cd = os.getcwd()
            os.chdir(repo_path)
            git_command = ['git', 'pull', 'origin']
            subprocess.check_call(git_command)
            os.chdir(prev_cd)
        else:
            git_command = ['git', 'clone', uri, repo_path]
            subprocess.check_call(git_command)

def compile_and_install_sbcl(root_path):
    print ">> installing sbcl"
    sbcl_path = os.path.join(root_path, "sbcl")
    # first of all, install binary sbcl
    try:
        check_sbcl = ['sbcl', '--version']
        subprocess.check_call(check_sbcl)
    except:
        # install sbcl
        install_packages(True, ["sbcl"])
    # checking out
    sbcl_url = "-d:pserver:anonymous@sbcl.cvs.sourceforge.net:/cvsroot/sbcl"
    if not os.path.exists(sbcl_path):
        os.chdir(root_path)
        cvs_login_command = ["cvs", sbcl_url, "login"]
        cvs_co_command = ["cvs", "-z3", sbcl_url, "co", "-P", "sbcl"]
        subprocess.check_call(cvs_login_command)
        subprocess.check_call(cvs_co_command)
    else:
        os.chdir(sbcl_path)
        cvs_update_command = ["cvs", "up"]
        subprocess.check_call(cvs_update_command)
    # copy extention files...
    sbcl_customize_feature = "customize-target-features.lisp"
    if not os.path.exists(os.path.join(sbcl_path, sbcl_customize_feature)):
        # copy
        from_path = os.path.abspath(os.path.join(pwd,
                                                 sbcl_customize_feature))
        shutil.copyfile(from_path,
                        os.path.join(sbcl_path, sbcl_customize_feature))
    # build
    os.chdir(sbcl_path)
    subprocess.check_call(["sh", "./make.sh"])
    # install
    subprocess.check_call(["sudo", "sh", "./install.sh"])
    # remove sbcl if sbcl is installed by the package system

def run_emacs_settings(root_path):
    emacs_settings_path = os.path.join(root_path, "emacs-settings")
    garaemon_url = 'http://garaemon.net/emacs-settings-repo/garaemon.el'
    if os.path.exists(emacs_settings_path):
        os.chdir(emacs_settings_path)
        if not os.path.exists(os.path.abspath('~/.emacs')):
            subprocess.check_call(['./emacs-settings', 'setup',
                                   '> ~/.emacs'])
        subprocess.check_call(['emacs-settings', 'add',
                               garaemon_url])
        subprocess.check_call(['emacs-settings', '-d', 'install',
                               'garaemon-all-settings'])
    else:
        print "%s is not found" % emacs_settings_path

def install_ffmpeg(root):
    "see http://ubuntuforums.org/showthread.php?t=786095"
    arch = detect_os()
    if not arch == "Ubuntu":
        raise Exception, "only Ubuntu is supported"
    ffmpeg_dir = os.path.join(root, "ffmpeg")
    if not os.path.exists(ffmpeg_dir):
        os.mkdir(ffmpeg_dir)
    os.chdir(ffmpeg_dir)
    install_ffmpeg_setup_apt()
    install_ffmpeg_x264(ffmpeg_dir)
    install_ffmpeg_libvpx(ffmpeg_dir)
    install_ffmpeg_ffmpeg(ffmpeg_dir)

def install_ffmpeg_setup_apt():
    subprocess.check_call(["sudo", "aptitude", "remove", "ffmpeg",
                           "x264", "libx264-dev"])

# TODO: need some abstraction...
def install_ffmpeg_x264(root):
    x264_dir = os.path.join(root, "x264")
    if os.path.exists(x264_dir):
        os.chdir(x264_dir)
        subprocess.check_call(["git", "pull"])
    else:
        os.chdir(root)
        subprocess.check_call(["git", "clone",
                               "git://git.videolan.org/x264.git"])
        os.chdir(x264_dir)
    subprocess.check_call(["./configure"])
    subprocess.check_call(["make"])
    subprocess.check_call(["sudo", "make", "install"])

def install_ffmpeg_libvpx(root):
    libvpx_dir = os.path.join(root, "libvpx")
    if os.path.exists(libvpx_dir):
        os.chdir(libvpx_dir)
        subprocess.check_call(["git", "pull"])
    else:
        os.chdir(root)
        subprocess.check_call(["git", "clone",
                               "git://review.webmproject.org/libvpx.git"])
        os.chdir(libvpx_dir)
    subprocess.check_call(["./configure"])
    subprocess.check_call(["make"])
    subprocess.check_call(["sudo", "make", "install"])
    
def install_ffmpeg_ffmpeg(root):
    ffmpeg_dir = os.path.join(root, "ffmpeg")
    if os.path.exists(ffmpeg_dir):
        os.chdir(ffmpeg_dir)
        subprocess.check_call(["svn", "up"])
    else:
        os.chdir(root)
        subprocess.check_call(["svn", "co",
                               "svn://svn.ffmpeg.org/ffmpeg/trunk",
                               "ffmpeg"])
        os.chdir(ffmpeg_dir)
    subprocess.check_call(["./configure", "--enable-gpl",
                           "--enable-version3",
                           "--enable-nonfree",
                           "--enable-postproc",
                           "--enable-pthreads",
                           "--enable-libfaac",
                           "--enable-libmp3lame",
                           "--enable-libopencore-amrnb",
                           "--enable-libopencore-amrwb",
                           "--enable-libtheora",
                           "--enable-libvorbis",
                           "--enable-libvpx",
                           "--enable-libx264",
                           "--enable-libxvid",
                           "--enable-x11grab"])
    subprocess.check_call(["make"])
    subprocess.check_call(["sudo", "make", "install"])

    
def main(argv):
    """
    main function.
    """
    if len(argv) < 2:
        usage()
        exit(1)                         # return false
    # argv[0] = garainstall
    args = argv[1:]
    # parse setup
    parser = OptionParser()
    setup_parser(parser)
    (options, args) = parser.parse_args(args)
    root_path = os.path.abspath(args[0])
    if options.all:
        options.install_packages = True
        options.clone_git = True
        options.sbcl = True
        options.emacs_settings = True
    if options.install_packages:
        install_packages_from_yaml(options.without_query_yes_no,
                                   options.package_yaml)
    if options.clone_git:
        clone_github_repos(root_path, options.github_yaml,
                           options.clone_as_developer)
    if options.sbcl:
        compile_and_install_sbcl(root_path)
    if options.emacs_settings:
        run_emacs_settings(root_path)
    if options.nerdtool:
        install_nerdtool(root_path)
    if options.conky:
        setup_conky(root_path)
    if options.ffmpeg:
        install_ffmpeg(root_path)
main(sys.argv)

