#!/usr/bin/env python
# -*- mode: python -*-

"""
usage: garabootstrap [OPTIONS] INSTALL_PATH

this script just clone garaemon-install package from github.com.
To use git, you need to install git-core on your machine, and
the other python scripts in garaemon-install requires python yaml binding.
This script automatically install py-yaml and git-core before cloning
garaemon-install repository.

Optioins:
 --yes|-y (without invokating yes or no questions)
 --developer|-d (clone the repository as a developer. proper ssh
                 key is required)
"""

from optparse import OptionParser, OptionValueError
import os
import sys
import subprocess

packages = {'darwin': ['py-yaml', 'py25-yaml', 'py26-yaml', 'git-core'],
            'Ubuntu': ['git-core', 'python-yaml']}

# query_yes_no is copied
# from http://code.activestate.com/recipes/577058-query-yesno/
def query_yes_no(question, default="yes"):
    """Ask a yes/no question via raw_input() and return their answer.
    
    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is one of "yes" or "no".
    """
    valid = {"yes":"yes",   "y":"yes",  "ye":"yes",
             "no":"no",     "n":"no"}
    if default == None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while 1:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return default
        elif choice in valid.keys():
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "\
                             "(or 'y' or 'n').\n")

def usage():
  print __doc__ % vars()

def detect_os():
    """ only supports darwin and ubuntu"""
    if os.path.exists("/usr/bin/sw_vers"):
        return "darwin"
    elif os.path.exists("/usr/bin/lsb_release"):
        return "Ubuntu"
    else:
        raise
    
# python-yaml,
def apt_base_packages(without_y_or_n_p):
    apt_packages = packages['Ubuntu']
    command = ["sudo", "aptitude", "install"]
    if without_y_or_n_p:
        command.append("-y")
    command.extend(apt_packages)
    subprocess.check_call(command)
    

def port_base_packages(without_y_or_n_p):
    port_packages = packages['darwin']
    command = ["sudo", "port", "install"]
    if without_y_or_n_p:
        command.append("-y")
    command.extend(port_packages)
    subprocess.check_call(command)
    
def install_base_packages(without_y_or_n_p):
    try:
        arch = detect_os()
        if arch == "Ubuntu":
            apt_base_packages(without_y_or_n_p)
        elif arch == "darwin":
            try:
                port_base_packages(without_y_or_n_p)
            except:
                print 'did you install macports?'
        else:
            raise
    except:
        print "installing basic package is failed!"


def git_clone_package(path, without_y_or_n_p, developerp):
    if developerp:
        git_url = 'git://github.com/garaemon/garaemon-install.git'
    else:
        # check ssh directory
        if not os.path.exists(os.environ['HOME'] + '/.ssh/id_rsa'):
            print 'You need to setup ssh rsa key in your ~/.ssh'
            exit(2)
        git_url = 'git@github.com:garaemon/garaemon-install.git'
    path = os.path.join(path, 'garaemon-install')
    if os.path.exists(path):
        prev_cd = os.getcwd()
        os.chdir(path)
        git_command = ['git', 'pull']
        subprocess.check_call(git_command)
        os.chdir(prev_cd)
    else:
        git_command = ['git', 'clone', git_url, path]
        subprocess.check_call(git_command)
        

def main(argv):
    if len(argv) < 2:
        usage()
        exit(1)                         # return false
    args = argv[1:]
    parser = OptionParser()
    parser.add_option("-y", "--yes", dest = "without_query_yes_no",
                      default = False,
                      help = "without query yes or no in aptitude (and port)",
                      action = "store_true")
    parser.add_option("-d", "--developer", dest = "clone_as_developer",
                      default = False,
                      help = "clone garaemon-install repository as committer",
                      action = "store_true")
    (options, args) = parser.parse_args(args)
    install_base_packages(options.without_query_yes_no)
    git_clone_package(args[0], options.without_query_yes_no,
                      options.clone_as_developer)
    print 'bootstrap phase is done, you need to run garainstall after this!'


if __name__ == "__main__":
    main(sys.argv)
